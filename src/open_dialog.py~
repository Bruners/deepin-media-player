#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2012 Deepin, Inc.
#               2012 Hailong Qiu
#
# Author:     Hailong Qiu <356752238@qq.com>
# Maintainer: Hailong Qiu <356752238@qq.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from dtk.ui.scrolled_window  import ScrolledWindow
from dtk.ui.application import Application

from utils import *


import gtk
import sys

gtk.gdk.threads_init()

class OpenDialog(object):
    def __init__ (self, title_string = " 深度影音-打开"):
       self.fixed_padding = 25
       self.all_file = []
       self.i = 3
       self.win = Application("open_dialog", False)
       self.win.window.set_default_size(500, 400)
       # Set open window.
       self.win.add_titlebar(["close"],
                              None,
                              title_string, " ", add_separator = True)
       self.win.window.change_background(app_theme.get_pixbuf("bg.png"))      
       # Show file list.
       self.fixed = gtk.Fixed()
       
       # Toolbar Init.
       self.back_button = gtk.Button("返回上一层")
       self.back_button.connect("clicked", self.saomiao_dir, self.fixed)
        
       # Scrolled window init.                       
       self.scrolled_window = ScrolledWindow()
       self.scrolled_window.add_child(self.fixed)
       
       self.win.main_box.pack_start(self.back_button, False, False)
       self.win.main_box.pack_start(self.scrolled_window)
       
       self.win.window.show_all()       
     
       
    def saomiao_dir(self, widget):            
        #gtk.timeout_add(1, self.time_out, "/home/long/音乐")
        print self.fixed
        return False
    '''    
    def time_out(self, path):
        path_thread = threading.Thread(target=self.path_dir, args=(path,))
        path_thread.start()
        return False
        
    def path_dir(self, path):
        os.chdir(path)
        # 列出路径的所有东西.
        if os.path.isdir(path):
            # 判断文件,加入列表.
            for i in os.listdir(path):
                new_path = path + "/" + i
                if os.path.isfile(new_path):    #判断文件
                    print new_path
                    self.all_file.append(new_path)
                    gtk.gdk.threads_enter()
                    self.fixed.put(gtk.Button(new_path), 0, self.fixed_padding)
                    self.win.window.show_all()
                    gtk.gdk.threads_leave()
                    self.fixed_padding += 25

                if os.path.isdir(new_path):
                    self.path_dir(new_path)'''
                    
               
               
                    
                    
       
OpenDialog()
gtk.gdk.threads_enter()
gtk.main()
gtk.gdk.threads_leave()
        





